meta
{
  import compiler

  @[CacheResults()]
  func constructor_call(create_type as type, arg_types as type[])
  {
    return compiler.compile_class(_constructor_call, {
      "type": create_type,
      "arg_types": arg_types
    })
  }
}

@[c_call("brandy-runtime.dll", "buf_malloc")]
func __malloc(size as iarch) byte *: nil

@[c_call("brandy-runtime.dll", "buf_free")]
func __free(addr as byte *) void: nil

class _constructor_call
{
  typedef create_type as decltype nil
  typedef arg_types as { decltype nil }
  typedef @implicitly_convert as create_type

  var m_args : arg_types

  func @create(args as arg_types) void
  {
    m_args = args
  }

  func @call(mem as byte[] *) void
  {
    __ptr_cast(create_type)(mem).@create(m_args...)
  }
}

func @alloc(@[no_implicit_conversion()] ctor)
{
  mem = __malloc()
  ctor(mem)
  return mem.as_reference(ctor.create_type)
}

func @free(@[pointer] obj)
{
  obj.@destroy()
  __free(obj)
}

var x = alloc something(5)
free x
