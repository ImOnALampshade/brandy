meta
{
  import compiler

  @[CacheResults()]
  func vector(type as typename) : typename
  {
    return compiler.compile_class(_vector, {
      "item_type": type
    })
  }
}

class _vector
{
  typedef item_type as int

  var m_items     : item_type[] * = nil
  var m_size      : iarch = 0
  var m_cap_inner : iarch = 0

  property m_cap : iarch
    get: m_cap_inner

    set new_cap
    {        
      new_arr = alloc item_type[new_cap]
      for i in range 0, m_size:
        new_arr[i] = m_items[i]
      m_items = new_arr
      m_cap_inner = new_cap
    }

  func @destroy: 
    free m_items

  func push_back(item as item_type)
  {
    if m_size == m_cap: 
      m_cap = max 1, m_cap * 2

    m_items[m_size] = item
    m_size += 1
  }

  property front:
    get: m_items[0]
    set item: m_items[0] = item

  property back:
    get: m_items[m_size - 1]
    set item: m_items[m_size - 1] = item

  func @index_get(i as iarch): m_items[i]
  func @index_set(i as iarch, item as item_type): m_items[i] = item
}

// IE:
int_vector = vector(int)
str_vector = vector(string)



