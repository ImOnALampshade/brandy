TOKEN_VALUE(INVALID, "\0"),

// Identifiers
TOKEN_VALUE(IDENTIFIER, "[a-zA-Z@$_][a-zA-Z0-9@$_]*"),

// Whitepsaces
TOKEN_VALUE(WHITESPACE, "\\s+"),
TOKEN_VALUE(NEWLINE, "\n"),

// Comments - including shebang, for interop with bash
TOKEN_VALUE(COMMENTS_START, ""),
TOKEN_VALUE(BLOCK_COMMENT, "/\\*.*\\*/"),
TOKEN_VALUE(LINE_COMMENT, "//.*\n"),
TOKEN_VALUE(SHEBANG, "#!.*\n"),
TOKEN_VALUE(DOCUMENTION_BLOCK, "\"\"\".*\"\"\""),
TOKEN_VALUE(COMMENTS_END, ""),

// Literals
TOKEN_VALUE(LITERALS_START, ""),
TOKEN_VALUE(_INT8, "([0-9]|0x[0-9A-Fa-f]+)+i8"),
TOKEN_VALUE(_INT16, "([0-9]|0x[0-9A-Fa-f]+)+i16"),
TOKEN_VALUE(_INT32, "([0-9]|0x[0-9A-Fa-f]+)+(i32)?"),
TOKEN_VALUE(_INT64, "([0-9]|0x[0-9A-Fa-f]+)+i64"),
TOKEN_VALUE(_UINT8, "([0-9]|0x[0-9A-Fa-f]+)+u8"),
TOKEN_VALUE(_UINT16, "([0-9]|0x[0-9A-Fa-f]+)+u16"),
TOKEN_VALUE(_UINT32, "([0-9]|0x[0-9A-Fa-f]+)+u32"),
TOKEN_VALUE(_UINT64, "([0-9]|0x[0-9A-Fa-f]+)+u64"),
TOKEN_VALUE(_FLOAT32, "[0-9]+\\.[0-9]+([eE][+\\-]?[0-9]+)?f"),
TOKEN_VALUE(_FLOAT64, "[0-9]+\\.[0-9]+([eE][+\\-]?[0-9]+)?"),
TOKEN_VALUE(_CHAR, "'\\\\?.'"),
TOKEN_VALUE(_STRING, "\".*\""),
TOKEN_VALUE(REGEX, "/.*/[a-zA-Z]?"),

TOKEN_VALUE(KEYWORDS_START, ""),
TOKEN_VALUE(_TRUE, "true"),
TOKEN_VALUE(_FALSE, "false"),
TOKEN_VALUE(NONE, "null"),
TOKEN_VALUE(LITERALS_END, ""),

// Psuedo-Function things
TOKEN_VALUE(TODO, "todo"),
TOKEN_VALUE(NEW, "new"),
TOKEN_VALUE(DELETE, "delete"),

// Control flow keywords
TOKEN_VALUE(IF, "if"),
TOKEN_VALUE(THEN, "then"),
TOKEN_VALUE(ELIF, "elif"),
TOKEN_VALUE(ELSE, "else"),
TOKEN_VALUE(WHILE, "while"),
TOKEN_VALUE(FOR, "for"),
TOKEN_VALUE(UNLESS, "unless"),
TOKEN_VALUE(UNTIL, "until"),
TOKEN_VALUE(SWITCH, "switch"),
TOKEN_VALUE(CASE, "case"),
TOKEN_VALUE(IN, "in"),
TOKEN_VALUE(DO, "do"),
TOKEN_VALUE(BREAK, "break"),
TOKEN_VALUE(CONTINUE, "continue"),

// Function related keywords
TOKEN_VALUE(FUNCTION, "func"),
TOKEN_VALUE(METHOD, "method"),
TOKEN_VALUE(LAMBDA, "lambda"),
TOKEN_VALUE(STATIC, "static"),
TOKEN_VALUE(PURE, "pure"),
TOKEN_VALUE(VIRTUAL, "virtual"),
TOKEN_VALUE(FINAL, "final"),
TOKEN_VALUE(OVERRIDE, "override"),
TOKEN_VALUE(RETURN, "return"),
TOKEN_VALUE(YIELD, "yield"),
TOKEN_VALUE(ASYNC, "async"),
TOKEN_VALUE(AWAIT, "await"),
TOKEN_VALUE(IMPORT, "import"),
TOKEN_VALUE(FROM, "from"),

// Class related keywords
TOKEN_VALUE(CLASS, "class"),
TOKEN_VALUE(EXTENDS, "extends"),
TOKEN_VALUE(PUBLIC, "public"),
TOKEN_VALUE(PROTECTED, "protected"),
TOKEN_VALUE(PRIVATE, "private"),
TOKEN_VALUE(PROPERTY, "property"),
TOKEN_VALUE(GET, "get"),
TOKEN_VALUE(SET, "set"),
TOKEN_VALUE(ENUM, "enum"),

// Other keywords
TOKEN_VALUE(AS, "as"),
TOKEN_VALUE(OVER, "over"),
TOKEN_VALUE(WHERE, "where"),
TOKEN_VALUE(SIZEOF, "sizeof"),
TOKEN_VALUE(ALIGNOF, "alignof"),
TOKEN_VALUE(GOTO, "goto"),
TOKEN_VALUE(IS, "is"),
TOKEN_VALUE(ISNT, "isnt"),

TOKEN_VALUE(KEYWORDS_END, ""),


TOKEN_VALUE(OPERATORS_START, ""),
TOKEN_VALUE(ATTRIBUTE_START, "#["),

// Grouping operators
TOKEN_VALUE(OPEN_PAREN, "("),
TOKEN_VALUE(CLOSE_PAREN, ")"),
TOKEN_VALUE(OPEN_SQUARE, "["),
TOKEN_VALUE(CLOSE_SQUARE, "]"),
TOKEN_VALUE(OPEN_CURLY, "{"),
TOKEN_VALUE(CLOSE_CURLY, "}"),

// Punctuation
TOKEN_VALUE(DOT, "."),
TOKEN_VALUE(COMMA, ","),
TOKEN_VALUE(COLON, ":"),
TOKEN_VALUE(SEMICOLON, ";"),

// Operators
TOKEN_VALUE(EQUALITY, "=="),
TOKEN_VALUE(INEQUALITY, "!="),
TOKEN_VALUE(LESS_THAN_OR_EQUAL, "<="),
TOKEN_VALUE(GREATER_THAN_OR_EQUAL, ">="),
TOKEN_VALUE(LESS_THAN, ">"),
TOKEN_VALUE(GREATER_THAN, "<"),
TOKEN_VALUE(APPROX_EQUALITY, "~=="),
TOKEN_VALUE(APPROX_INEQUALITY, "~!="),
TOKEN_VALUE(APPROX_LESS_THAN, "~<"),
TOKEN_VALUE(APPROX_GREATER_THAN, "~>"),
TOKEN_VALUE(APPROX_LESS_THAN_OR_EQUAL, "~<="),
TOKEN_VALUE(APPROX_GREATER_THAN_OR_EQUAL, "~>="),

TOKEN_VALUE(ADDITION, "+"),
TOKEN_VALUE(SUBTRACTION, "-"),
TOKEN_VALUE(MULTIPLICATION, "*"),
TOKEN_VALUE(DIVIDE, "/"),
TOKEN_VALUE(MODULO, "%"),
TOKEN_VALUE(DOUBLE_MODULO, "%%"),
TOKEN_VALUE(EXPONENT, "**"),
TOKEN_VALUE(INCREMENT, "++"),
TOKEN_VALUE(DECREMENT, "--"),
TOKEN_VALUE(SINGLE_QUESTION, "?"),
TOKEN_VALUE(DOUBLE_QUESTION, "??"),

TOKEN_VALUE(BITWISE_AND, "&"),
TOKEN_VALUE(BITWISE_OR, "|"),
TOKEN_VALUE(BITWISE_XOR, "^"),
TOKEN_VALUE(BITWISE_NOT, "~"),
TOKEN_VALUE(LOGICAL_AND, "&&"),
TOKEN_VALUE(LOGICAL_OR, "||"),
TOKEN_VALUE(LOGICAL_NOT, "!"),

TOKEN_VALUE(SINGLE_RIGHT_ARROW, "->"),
TOKEN_VALUE(SINGLE_LEFT_ARROW, "<-"),
TOKEN_VALUE(SINGLE_RIGHT_LONG_ARROW, "-->"),
TOKEN_VALUE(SINGLE_LEFT_LONG_ARROW, "<--"),
TOKEN_VALUE(BIDIRECTIONAL_ARROW, "<->"),

TOKEN_VALUE(SINGLE_RIGHT_FAT_ARROW, "=>"),
TOKEN_VALUE(SINGLE_RIGHT_LONG_FAT_ARROW, "==>"),
TOKEN_VALUE(SINGLE_LEFT_LONG_FAT_ARROW, "<=="),
TOKEN_VALUE(BIDIRECTIONAL_FAT_ARROW, "<=>"),

TOKEN_VALUE(ASSIGNMENT_CREATE, ":="),
TOKEN_VALUE(ASSIGNMENT, "="),
TOKEN_VALUE(ASSIGNMENT_ADDITION, "+="),
TOKEN_VALUE(ASSIGNMENT_SUBTRACTION, "-="),
TOKEN_VALUE(ASSIGNMENT_MULTIPLICATION, "*="),
TOKEN_VALUE(ASSIGNMENT_DIVIDE, "/="),
TOKEN_VALUE(ASSIGNMENT_MODULO, "%="),
TOKEN_VALUE(ASSIGNMENT_DOUBLE_MODULO, "%%="),
TOKEN_VALUE(ASSIGNMENT_EXPONENT, "**="),
TOKEN_VALUE(ASSIGNMENT_BITWISE_AND, "&="),
TOKEN_VALUE(ASSIGNMENT_BITWISE_OR, "|="),
TOKEN_VALUE(ASSIGNMENT_BITWISE_XOR, "^="),
TOKEN_VALUE(ASSIGNMENT_LOGICAL_AND, "&&="),
TOKEN_VALUE(ASSIGNMENT_LOGICAL_OR, "||="),
TOKEN_VALUE(ASSIGNMENT_BITSHIFT_RIGHT, ">>="),
TOKEN_VALUE(ASSIGNMENT_BITSHIFT_LEFT, "<<="),
TOKEN_VALUE(ASSIGNMENT_BITSHIFT_LOGICAL_RIGHT, ">>>="),
TOKEN_VALUE(ASSIGNMENT_BITSHIFT_LOGICAL_LEFT, "<<<="),

TOKEN_VALUE(PIPE_SINGLE_RIGHT, "|>"),
TOKEN_VALUE(PIPE_SINGLE_LEFT, "<|"),
TOKEN_VALUE(PIPE_DOUBLE_RIGHT, "||>"),
TOKEN_VALUE(PIPE_DOUBLE_LEFT, "<||"),
TOKEN_VALUE(PIPE_TRIPLE_RIGHT, "|||>"),
TOKEN_VALUE(PIPE_TRIPLE_LEFT, "<|||"),

TOKEN_VALUE(DOUBLE_DOT, ".."),
TOKEN_VALUE(TRIPLE_DOT, "..."),
TOKEN_VALUE(DOUBLE_COLON, "::"),
TOKEN_VALUE(TRIPLE_COLON, ":::"),

TOKEN_VALUE(LOGICAL_BITSHIFT_RIGHT, ">>>"),
TOKEN_VALUE(LOGICAL_BITSHIFT_LEFT, "<<<"),
TOKEN_VALUE(BITSHIFT_RIGHT, ">>"),
TOKEN_VALUE(BITSHIFT_LEFT, "<<"),

TOKEN_VALUE(DOT_MINUS, ".-"),
TOKEN_VALUE(DOT_EQUAL, ".="),
TOKEN_VALUE(DOUBLE_DOT_EQUAL, "..="),

TOKEN_VALUE(META_START, "#"),

TOKEN_VALUE(OPERATORS_END, ""),
